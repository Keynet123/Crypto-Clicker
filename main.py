import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import os
import random
import time
#dsdadssdsa
API_TOKEN = '6496305390:AAHsGWlf0J4qGK7zk13MzWPVkjREYLolFoE'

bot = telebot.TeleBot(API_TOKEN)

file_path = os.path.dirname(os.path.realpath(__file__))


keyboard = InlineKeyboardMarkup()
approve_button = InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—åü§ë", callback_data="click")
cancel_button = InlineKeyboardButton("–ë–∞–ª–∞–Ω—Åüí≤", callback_data="balance")
keyboard.row(approve_button, cancel_button)

emojis = ["ü§ë", "üí≤", "üíµ", "üí¥", "üí∂", "üí∑", "üí∏", "üçâ"]

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_click_time = {}


isClear = False

@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    global msg, isClear
    if isClear:
        isClear = False
        try:
            with sqlite3.connect(file_path + "/database.db") as con_click:
                cur_click = con_click.cursor()

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                cur_click.execute("SELECT message_id FROM messages_id WHERE id = ?", (message.chat.id,))
                result = cur_click.fetchall()

                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
                for row in result:
                    for message_id in row:
                        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        cur_click.execute("DELETE FROM messages_id WHERE message_id = ?", (message_id,))

                        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
                        try:
                            bot.delete_message(message.chat.id, message_id)
                        except Exception as e:
                            print(f"Error deleting message {message_id} in Telegram: {e}")

                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                con_click.commit()
                cur_click.close()
                print(result)
        except Exception as e:
            print(f"Error deleting messages: {e}")
        isClear = True

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    msg = bot.send_message(message.chat.id, f"""–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ –±–æ—Ç.
                    \n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
                    \n1. /help /start - –≤—ã–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    \n2. /balance - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å

                    \n–ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É(–≤—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, —Ñ–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
                    """, reply_markup=keyboard)
    with sqlite3.connect(file_path + "/database.db") as con:
        cur = con.cursor()
        cur.execute("INSERT INTO messages_id (id, message_id) VALUES (?, ?)", (message.chat.id, message.message_id))
        cur.execute("INSERT INTO messages_id (id, message_id) VALUES (?, ?)", (message.chat.id, msg.message_id))
        con.commit()
    isClear = True


@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"Error handling message: {e}")


def click(message):
    balance_id = 0.01
    user_id = message.chat.id
    username = message.chat.username
    try:
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ 1 —Å–µ–∫—É–Ω–¥–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        if user_id in last_click_time and current_time - last_click_time[user_id] < 0.5:
            return 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–∏

        with sqlite3.connect(file_path + "/database.db", check_same_thread=False) as con_click:
            cur_click = con_click.cursor()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
            last_click_time[user_id] = current_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id –≤ —Ç–∞–±–ª–∏—Ü–µ
            cur_click.execute(f"SELECT * FROM crypto_keynet_bot WHERE user_id = ?", (user_id,))
            existing_record = cur_click.fetchone()

            if existing_record:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                cur_click.execute("UPDATE crypto_keynet_bot SET balance = balance + ? WHERE user_id = ?", (balance_id, user_id))
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                cur_click.execute(f"INSERT INTO crypto_keynet_bot (balance, user_id) VALUES (?, ?)", (balance_id, user_id))

            con_click.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ balance_value
        cur_click.execute("SELECT balance FROM crypto_keynet_bot WHERE user_id = ?", (user_id,))
        result = cur_click.fetchone()

        if result:
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ balance_value
            return result[0]
        else:
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç None, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
            return 0

    except Exception as e:
        print(f"SQLite error: {e}")
        return 0



@bot.message_handler(commands=["balance"])
def balance(message, balance_value):
    try:
        with sqlite3.connect(file_path + "/database.db") as con_balance:
            cur_balance = con_balance.cursor()
            username1 = str(message.chat.first_name)
            cur_balance.execute("SELECT balance FROM crypto_keynet_bot WHERE user_id = ?", (message.chat.id,))

            result = cur_balance.fetchone()
            if result:
                balance_value = result[0]
                rounded_balance = round(balance_value, 2)
                
                bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=f'{username1}, –í–∞—à –±–∞–ª–∞–Ω—Å: {rounded_balance} ARBUZ!', reply_markup=keyboard)
            else:
                print("User not found in the database.")
    except Exception as e:
        print(f"2 error: {e}")

def balance_out():
    global balance_value
    return balance_value

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global user, keyboard, balance_value, emojis
    username1 = str(call.message.chat.first_name)
    if call.data == "click":
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é click –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ balance_value
            balance_value = click(call.message)
            rounded_balance = round(balance_value, 2)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 0.01 ARBUZ!{random.choice(emojis)}', reply_markup=keyboard)
        except Exception:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 0.01 ARBUZ!ü•±', reply_markup=keyboard)
    elif call.data == "balance":
        try:
            # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –±–∞–ª–∞–Ω—Å –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            rounded_balance = round(balance_value, 2)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'{username1}, –í–∞—à –±–∞–ª–∞–Ω—Å: {rounded_balance} ARBUZ!', reply_markup=keyboard)
        except Exception:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'{username1}. –í–∞—à –±–∞–ª–∞–Ω—Å: {rounded_balance} ARBUZ!', reply_markup=keyboard)



bot.infinity_polling(timeout=10, long_polling_timeout = 5)